{"version":3,"sources":["logo.svg","components/City_Card.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","City_Card","props","state","data","weather","val","Math","random","fetch","this","city","then","response","a","console","log","json","notify","setState","temp","round","main","high","temp_max","low","temp_min","category","windspeed","wind","speed","name","iconCode","icon","toast","error","Col","md","style","width","padding","Card","className","Body","Text","Image","src","Component","App","fakeArray","cityName","pop","searchText","time","Date","getHours","event","target","value","flag","i","length","push","currentTime","Container","Row","InputGroup","FormControl","placeholder","aria-label","aria-describedby","onChange","searchChange","bind","Button","variant","type","onClick","submitClicked","map","item","key","React","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.cb34aa7a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react'\nimport '../App.css';\n\nimport Button from 'react-bootstrap/Button';\nimport Card from 'react-bootstrap/Card';\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport Image from 'react-bootstrap/Image';\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\n\nclass City_Card extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            data: null,\n            weather: null\n        }\n    }\n\n    colorFinder() {\n  var color = \"\"; \n  var val= Math.random();\n\n  if(val <= .2) {\n    color = \"colorPairing1\";\n  } else if (val > .2 && val <= .4) {\n    color = \"colorPairing2\";\n  } else if (val > .4 && val <= .6) {\n    color = \"colorPairing3\";\n  } else if (val > .6 && val <= .8) {\n    color = \"colorPairing4\";\n  } else {\n    color = \"colorPairing5\";\n  }\n\n  return color; \n}\n\n    async componentDidMount(){\n        await fetch('/weather/'+this.props.city).then(async response => {\n            console.log(\"resp in json\", response)\n            const json = await response.json()\n            console.log(json.data)\n            if(json.data === \"404\"){\n                console.log(\"returned 404 error; not found\")\n                this.notify()\n            }else{\n                this.setState( {weather: {\n                    temp: Math.round((json.data.main.temp - 273.15)*(9/5)+32),\n                    high: Math.round((json.data.main.temp_max - 273.15)*(9/5)+32), \n                    low: Math.round((json.data.main.temp_min - 273.15)*(9/5)+32),\n                    category: json.data.weather[0].main,\n                    windspeed: json.data.wind.speed,\n                    name: json.data.name,\n                    iconCode: json.data.weather[0].icon,\n                }})\n            }\n        })\n    }\n\n    notify(){\n        toast.error(\"We couldn't find that city, ensure your entry is spelled correctly!\")\n    }\n \n    render() {\n        return (\n            <div>\n                <ToastContainer />\n                {this.state.weather &&\n                    <Col md=\"auto\" style={{ width: '18rem', padding: '20px'}} >\n                        <Card className=\"card-style\">\n                            <Card.Body className=\"card-color\">\n                                <h1><Card.Text className=\"city-title header-text\">{this.state.weather.name}</Card.Text></h1>\n                                <Card.Text className=\"city-image\">\n                                    <Image\n                                    src={\"http://openweathermap.org/img/w/\" + this.state.weather.iconCode + \".png\"}\n                                    ></Image>\n                                </Card.Text>\n                                <Card.Text className=\"body-text\">\n                                    {this.state.weather.category}\n                                </Card.Text>\n                                <Card.Text className=\"body-text\">\n                                     {this.state.weather.temp}° F\n                                </Card.Text>\n                                <Card.Text className=\"body-text\">\n                                    High: {this.state.weather.high}° F\n                                </Card.Text>\n                                <Card.Text className=\"body-text\">\n                                    Low: {this.state.weather.low}° F\n                                </Card.Text>\n                            </Card.Body>\n                        </Card>\n                    </Col>\n                }     \n            </div>\n        )\n    }\n}\n\n\nexport default City_Card\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport City_Card from './components/City_Card.jsx';\nimport {Row, Col, Container, InputGroup, FormControl, Button, Card} from 'react-bootstrap'\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\n\nclass App extends React.Component {\n  constructor(props){\n    super(props)\n    this.state = {\n      data: null,\n      fakeArray: [{cityName: \"San Francisco\", pop: 3000}, {cityName: \"New York\", pop: 200}, {cityName: \"Chapel Hill\", pop: 100}\n    \n                  ],\n      searchText: \"\"\n    }\n  }\n\nnotify(){\n  toast.error(\"You've already added this city to your dashboard\")    \n}\n  \ncurrentTime() {\n    var today = new Date();\n    var time = today.getHours();\n\n    var greeting = \"\";\n\n    if(time <= 11) {\n      greeting = \"Good Morning!\"\n    } else if(time >= 12 && time <= 16) {\n      greeting = \"Good Afternoon!\"\n    } else {\n      greeting = \"Good Evening!\"\n    }\n\n    return greeting;\n}\n\n\n  searchChange(event){\n    //console.log(event.target.value)\n    this.setState( {searchText: event.target.value} )\n\n  }\n\n  submitClicked(){\n      var flag = false\n      for(var i = 0; i < this.state.fakeArray.length; i++) {\n        if(this.state.fakeArray[i].cityName === this.state.searchText) {\n          flag = true\n        }\n      }\n\n      if(!flag) {\n        var temp = this.state.fakeArray\n        temp.push({cityName: this.state.searchText})\n        this.setState( {fakeArray: temp} )\n        this.setState( {searchText: \"\"} )\n      }else{\n        this.notify()\n      }\n      \n  }\n\n  render(){\n    return (\n    <div>\n      <h1 className=\"header header-text\">{this.currentTime()}</h1>\n      <ToastContainer />\n      <Container>\n        <Row className=\"nav-style body-text\">\n        <Col>\n        <InputGroup className=\"mb-3 input-field\">\n          <FormControl\n            placeholder=\"Add Your City\"\n            aria-label=\"Username\"\n            aria-describedby=\"basic-addon1\"\n            onChange={this.searchChange.bind(this)}\n          />\n          <Button className=\"input-button\" variant=\"dark\" type=\"submit\" onClick={this.submitClicked.bind(this)}>\n            Submit\n        </Button>\n        </InputGroup>\n        </Col>\n        </Row>\n        \n      </Container>\n      <Row className=\"mb-3 outer-container\">\n      <Col>\n      <Container >\n        <Row className=\"justify-content-md-center\">\n          \n            {this.state.fakeArray && \n              this.state.fakeArray.map((item, key) => {\n                return <City_Card city={item.cityName} pop={item.pop}/>\n              })\n            }\n            \n          </Row>\n        </Container>\n        </Col>\n        </Row>\n      </div>\n    );\n  }\n  \n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}